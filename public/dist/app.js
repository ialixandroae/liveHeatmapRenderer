"use strict";require(["esri/Map","esri/views/MapView","esri/layers/VectorTileLayer","esri/Basemap","esri/layers/Layer","esri/layers/GraphicsLayer","esri/WebMap","esri/Graphic","esri/widgets/Expand","esri/core/watchUtils","dojo/on","dojo/dom","dojo/domReady!"],function(e,t,o,n,i,r,a,s,c,d,l,u){var p=void 0,m=void 0,y=new r,f=void 0,v=void 0,h=void 0,w=void 0,b=new e({basemap:new n({baseLayers:[new o({url:"http://www.arcgis.com/sharing/rest/content/items/2557730096db4d2fa3e64980d431c29e/resources/styles/root.json?f=pjson"})],title:"Custom Basemap",id:"myBasemap"})});b.add(y);var g=new a({portalItem:{id:"22ef9d1f8d9e49e6920f0c4e0643113a"}}),I=new t({container:"mapEditing",map:b,zoom:3,center:[17,50]}),E=new t({container:"mapHeatmap",map:g,zoom:3,center:[17,50]});function k(e){j();var t=p.applyEdits(e);t.then(function(e){if(0<e.addFeatureResults.length){var t=e.addFeatureResults.map(function(e){return e.objectId}),o=t[0];F(o)}}).catch(function(e){console.log("==============================================="),console.error("[ applyEdits ] FAILURE: ",e.code,e.name,e.message),console.log("error = ",e)})}function F(e){var t={type:"simple-marker",color:[0,0,0,0],style:"square",size:"40px",outline:{color:[0,255,255,1],width:"3px"}},o=p.createQuery();o.where=p.objectIdField+" = "+e,p.queryFeatures(o).then(function(e){0<e.features.length&&((v=e.features[0]).symbol=t,I.graphics.add(v))})}function j(){h.style.display="none",w.style.display="block",I.graphics.removeAll()}i.fromPortalItem({portalItem:{id:"30ae9d12f10e407a8c1b2df7c72b7d46"}}).then(function(e){p=e,b.add(e)}).catch(function(e){console.log("Layer failed to load: ",e)}),f=u.byId("editArea"),w=u.byId("updateInstructionDiv"),h=u.byId("featureUpdateDiv"),l(u.byId("btnAddFeature"),"click",function(){j(),l.once(I,"click",function(e){if(e.stopPropagation(),e.mapPoint){var t=e.mapPoint.clone();t.z=void 0,t.hasZ=!1;var o=new s({geometry:t,attributes:{}}),n=new s({geometry:t,symbol:{type:"simple-marker",style:"circle",color:"red",size:"17px",outline:{color:[255,255,255],width:1}}});y.add(n);var i={addFeatures:[o]};k(i),h.style.display="block",w.style.display="none",u.byId("mapEditing").style.cursor="auto"}else console.error("event.mapPoint is not defined")}),u.byId("mapEditing").style.cursor="crosshair",f.style.cursor="auto"}),l(u.byId("btnDelete"),"click",function(){var e={deleteFeatures:[v]};k(e)}),m=new c({expandIconClass:"esri-icon-edit",expandTooltip:"Expand Edit",expanded:!0,view:I,content:f}),I.ui.add(m,"top-right"),I.on("click",function(e){j(),I.hitTest(e).then(function(e){1<e.results.length&&e.results[0].graphic&&(F(e.results[0].graphic.attributes[p.objectIdField]),h.style.display="block",w.style.display="none")})});[I,E].map(function(e,t,o){var n=o.concat();return n.splice(t,1),function(t,o){var n,i,r,a;o=Array.isArray(o)?o:[o];var s=function(){r&&r.forEach(function(e){e.remove()}),n&&n.remove(),i&&i.remove(),a&&clearTimeout(a),r=n=i=a=null},e=t.watch("interacting,animation",function(e){e&&(n||a||(a=setTimeout(function(){a=null,n=t.watch("viewpoint",function(t){o.forEach(function(e){e.viewpoint=t})})},0),r=o.map(function(e){return d.watch(e,"interacting,animation",function(e){e&&s()})}),i=d.whenTrue(t,"stationary",s)))});return{remove:function(){this.remove=function(){},s(),e.remove()}}}(e,n)}),d.when(I,"scale",function(){y.removeAll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
