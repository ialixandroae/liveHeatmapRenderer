"use strict";require(["esri/Map","esri/views/MapView","esri/layers/VectorTileLayer","esri/Basemap","esri/layers/Layer","esri/WebMap","esri/Graphic","esri/widgets/Expand","esri/core/watchUtils","dojo/on","dojo/dom","dojo/domReady!"],function(e,t,n,o,i,a,r,s,c,d,l){var u=void 0,p=void 0,m=void 0,f=void 0,y=void 0,v=void 0,h=new e({basemap:new o({baseLayers:[new n({url:"http://www.arcgis.com/sharing/rest/content/items/2557730096db4d2fa3e64980d431c29e/resources/styles/root.json?f=pjson"})],title:"Custom Basemap",id:"myBasemap"})}),b=new a({portalItem:{id:"22ef9d1f8d9e49e6920f0c4e0643113a"}}),w=new t({container:"mapEditing",map:h,zoom:3,center:[17,50]}),g=new t({container:"mapHeatmap",map:b,zoom:3,center:[17,50]});function I(e){F();var t=u.applyEdits(e);t.then(function(e){if(0<e.addFeatureResults.length){var t=e.addFeatureResults.map(function(e){return e.objectId}),n=t[0];E(n)}}).catch(function(e){console.log("==============================================="),console.error("[ applyEdits ] FAILURE: ",e.code,e.name,e.message),console.log("error = ",e)})}function E(e){var t={type:"simple-marker",color:[0,0,0,0],style:"square",size:"40px",outline:{color:[0,255,255,1],width:"3px"}},n=u.createQuery();n.where=u.objectIdField+" = "+e,u.queryFeatures(n).then(function(e){0<e.features.length&&((f=e.features[0]).symbol=t,w.graphics.add(f))})}function F(){y.style.display="none",v.style.display="block",w.graphics.removeAll()}i.fromPortalItem({portalItem:{id:"30ae9d12f10e407a8c1b2df7c72b7d46"}}).then(function(e){u=e,h.add(e)}).catch(function(e){console.log("Layer failed to load: ",e)}),m=l.byId("editArea"),v=l.byId("updateInstructionDiv"),y=l.byId("featureUpdateDiv"),d(l.byId("btnAddFeature"),"click",function(){F(),d.once(w,"click",function(e){if(e.stopPropagation(),e.mapPoint){var t=e.mapPoint.clone();t.z=void 0,t.hasZ=!1;var n=new r({geometry:t,attributes:{}}),o={addFeatures:[n]};I(o),y.style.display="block",v.style.display="none",l.byId("mapEditing").style.cursor="auto"}else console.error("event.mapPoint is not defined")}),l.byId("mapEditing").style.cursor="crosshair",m.style.cursor="auto"}),d(l.byId("btnDelete"),"click",function(){var e={deleteFeatures:[f]};I(e)}),p=new s({expandIconClass:"esri-icon-edit",expandTooltip:"Expand Edit",expanded:!0,view:w,content:m}),w.ui.add(p,"top-right"),w.on("click",function(e){F(),w.hitTest(e).then(function(e){1<e.results.length&&e.results[0].graphic&&(E(e.results[0].graphic.attributes[u.objectIdField]),y.style.display="block",v.style.display="none")})});[w,g].map(function(e,t,n){var o=n.concat();return o.splice(t,1),function(t,n){var o,i,a,r;n=Array.isArray(n)?n:[n];var s=function(){a&&a.forEach(function(e){e.remove()}),o&&o.remove(),i&&i.remove(),r&&clearTimeout(r),a=o=i=r=null},e=t.watch("interacting,animation",function(e){e&&(o||r||(r=setTimeout(function(){r=null,o=t.watch("viewpoint",function(t){n.forEach(function(e){e.viewpoint=t})})},0),a=n.map(function(e){return c.watch(e,"interacting,animation",function(e){e&&s()})}),i=c.whenTrue(t,"stationary",s)))});return{remove:function(){this.remove=function(){},s(),e.remove()}}}(e,o)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiTWFwIiwiTWFwVmlldyIsIlZlY3RvclRpbGVMYXllciIsIkJhc2VtYXAiLCJMYXllciIsIldlYk1hcCIsIkdyYXBoaWMiLCJFeHBhbmQiLCJ3YXRjaFV0aWxzIiwib24iLCJkb20iLCJmZWF0dXJlTGF5ZXIiLCJlZGl0RXhwYW5kIiwiZWRpdEFyZWEiLCJlZGl0RmVhdHVyZSIsImF0dHJpYnV0ZUVkaXRpbmciLCJ1cGRhdGVJbnN0cnVjdGlvbkRpdiIsIm1hcEVkaXRpbmciLCJ2aWV3RWRpdGluZyIsIm1hcEhlYXRtYXAiLCJwb3J0YWxJdGVtIiwiaWQiLCJ6b29tIiwiY2VudGVyIiwibWFwIiwidGhlbiIsImFkZExheWVyIiwiYXBwbHlFZGl0cyIsInBhcmFtcyIsInVuc2VsZWN0RmVhdHVyZSIsInByb21pc2UiLCJlZGl0UmVzdWx0c0hhbmRsZXIiLCJlZGl0c1Jlc3VsdCIsImFkZEZlYXR1cmVSZXN1bHRzIiwibGVuZ3RoIiwiYWRkcyIsInJlc3VsdCIsImxvZyIsIm9iamVjdElkIiwibmV3SW5jaWRlbnRJZCIsInNlbGVjdEZlYXR1cmUiLCJlcnJvciIsImhpdFRlc3QiLCJldmVudCIsImNvZGUiLCJuYW1lIiwibWVzc2FnZSIsInJlc3BvbnNlIiwicmVzdWx0cyIsInF1ZXJ5RmVhdHVyZXMiLCJncmFwaGljcyIsInN0eWxlIiwic2l6ZSIsIm91dGxpbmUiLCJjb2xvciIsIndpZHRoIiwicXVlcnkiLCJjcmVhdGVRdWVyeSIsImRpc3BsYXkiLCJyZW1vdmVBbGwiLCJmZWF0dXJlcyIsInN5bWJvbCIsInNlbGVjdGlvblN5bWJvbCIsImFkZCIsImV4cGFuZGVkIiwidmlldyIsImNvbnRlbnQiLCJmcm9tUG9ydGFsSXRlbSIsImxheWVyIiwiY29uc29sZSIsInBvaW50IiwiaGFzWiIsImJ5SWQiLCJuZXdJbmNpZGVudCIsIm9uY2UiLCJzdG9wUHJvcGFnYXRpb24iLCJtYXBQb2ludCIsInoiLCJ1bmRlZmluZWQiLCJnZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJjdXJzb3IiLCJhZGRGZWF0dXJlcyIsImVkaXRzIiwiZGVsZXRlRmVhdHVyZXMiLCJ2aWV3U3RhdGlvbmFyeUhhbmRsZSIsIm90aGVySW50ZXJhY3RIYW5kbGVycyIsInNjaGVkdWxlSWQiLCJjbGVhciIsImV4cGFuZFRvb2x0aXAiLCJ1aSIsImdyYXBoaWMiLCJvYmplY3RJZEZpZWxkIiwidHlwZSIsInZpZXdIZWF0bWFwIiwiaWR4Iiwidmlld3MiLCJvdGhlcnMiLCJjb25jYXQiLCJzcGxpY2UiLCJ2aWV3cG9pbnRXYXRjaEhhbmRsZSIsImludGVyYWN0V2F0Y2hlciIsImZvckVhY2giLCJoYW5kbGUiLCJvdGhlclZpZXciLCJ2aWV3cG9pbnQiLCJyZW1vdmUiLCJjbGVhclRpbWVvdXQiLCJ3YXRjaCIsIm5ld1ZhbHVlIiwic2V0VGltZW91dCIsInN5bmNocm9uaXplVmlld3MiLCJ2YWx1ZSIsInN5bmNocm9uaXplVmlldyIsImhhbmRsZXMiLCJ3aGVuVHJ1ZSIsImgiLCJ0aGlzIl0sIm1hcHBpbmdzIjoiYUFBQUEsUUFBUSxDQUNKLFdBREpBLHFCQUdJLDhCQWNBLGVBQUEsb0JBWEEsY0FhQSxlQUNBLHNCQUFBLHVCQUFBLFVBQUEsV0FSQSxrQkFVQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxFQUNBQyxFQUFBQyxHQUVBLElBQUFDLE9BQUFBLEVBQUFDLE9BQUFBLEVBR0FDLE9BQUFBLEVBQUFDLE9BQUFBLEVBQUFDLE9BQUFBLEVBQUFDLE9BQUFBLEVBZ0JNQyxFQUFhLElBQUlqQixFQUFJLENBVXJCa0IsUUFoQmdCLElBQUlmLEVBQVEsQ0FVNUJnQixXQUFBQSxDQWRVLElBQUlqQixFQUFnQixDQVU5QmUsSUFBQUEsMEhBS0ZHLE1BQUFBLGlCQUNJQyxHQUFBQSxnQkFPSkMsRUFINEIsSUFBQWpCLEVBQUEsQ0FJNUJrQixXQUFRLENBSlpGLEdBQUEsc0NBU0lHLEVBRjRCLElBQUF2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RUFBZ0IxRyxFQUFhMkcsU0FBQWxELEVBQ3pCbUQsYUFBQTVCLE9BR1AsTUFBQSxDQVBMa0IsT0FBQSxXQVBKVyxLQUFBWCxPQUFBLGFBVFlsQixJQTJCWmEsRUFBQUssV0FkZU8sQ0FBZ0JoRCxFQUFNZ0MiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShbXHJcbiAgICBcImVzcmkvTWFwXCIsXHJcbiAgICBcImVzcmkvdmlld3MvTWFwVmlld1wiLFxyXG4gICAgXCJlc3JpL2xheWVycy9WZWN0b3JUaWxlTGF5ZXJcIixcclxuICAgIFwiZXNyaS9CYXNlbWFwXCIsXHJcbiAgICBcImVzcmkvbGF5ZXJzL0xheWVyXCIsXHJcbiAgICBcImVzcmkvV2ViTWFwXCIsXHJcbiAgICBcImVzcmkvR3JhcGhpY1wiLFxyXG4gICAgXCJlc3JpL3dpZGdldHMvRXhwYW5kXCIsXHJcbiAgICBcImVzcmkvY29yZS93YXRjaFV0aWxzXCIsXHJcbiAgICBcImRvam8vb25cIixcclxuICAgIFwiZG9qby9kb21cIixcclxuICAgIFwiZG9qby9kb21SZWFkeSFcIlxyXG5dLCBmdW5jdGlvbiAoTWFwLCBNYXBWaWV3LCBWZWN0b3JUaWxlTGF5ZXIsIEJhc2VtYXAsIExheWVyLCBXZWJNYXAsIEdyYXBoaWMsIEV4cGFuZCxcclxuICAgIHdhdGNoVXRpbHMsXHJcbiAgICBvbiwgZG9tKSB7XHJcblxyXG4gICAgbGV0IGZlYXR1cmVMYXllciwgZWRpdEV4cGFuZDtcclxuXHJcbiAgICAvLyBmZWF0dXJlIGVkaXQgYXJlYSBkb21Ob2Rlc1xyXG4gICAgbGV0IGVkaXRBcmVhLCBlZGl0RmVhdHVyZSwgYXR0cmlidXRlRWRpdGluZywgdXBkYXRlSW5zdHJ1Y3Rpb25EaXY7XHJcblxyXG4gICAgLy8gY29uc3Qgc2ltcGxlUmVuZGVyZXIgPSB7XHJcbiAgICAvLyAgICAgdHlwZTogXCJzaW1wbGVcIiwgIC8vIGF1dG9jYXN0cyBhcyBuZXcgU2ltcGxlUmVuZGVyZXIoKVxyXG4gICAgLy8gICAgIHN5bWJvbDoge1xyXG4gICAgLy8gICAgICAgICB0eXBlOiBcInNpbXBsZS1tYXJrZXJcIiwgIC8vIGF1dG9jYXN0cyBhcyBuZXcgU2ltcGxlTWFya2VyU3ltYm9sKClcclxuICAgIC8vICAgICAgICAgc2l6ZTogMTIsXHJcbiAgICAvLyAgICAgICAgIGNvbG9yOiBcInJlZFwiLFxyXG4gICAgLy8gICAgICAgICBvdXRsaW5lOiB7ICAvLyBhdXRvY2FzdHMgYXMgbmV3IFNpbXBsZUxpbmVTeW1ib2woKVxyXG4gICAgLy8gICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgIC8vICAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCJcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH07XHJcblxyXG4gICAgY29uc3QgdnRsSXRlbSA9IG5ldyBWZWN0b3JUaWxlTGF5ZXIoe1xyXG4gICAgICAgIHVybDogXCJodHRwOi8vd3d3LmFyY2dpcy5jb20vc2hhcmluZy9yZXN0L2NvbnRlbnQvaXRlbXMvMjU1NzczMDA5NmRiNGQyZmEzZTY0OTgwZDQzMWMyOWUvcmVzb3VyY2VzL3N0eWxlcy9yb290Lmpzb24/Zj1wanNvblwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB2ZWN0b3JCYXNlbWFwID0gbmV3IEJhc2VtYXAoe1xyXG4gICAgICAgIGJhc2VMYXllcnM6IFt2dGxJdGVtXSxcclxuICAgICAgICB0aXRsZTogXCJDdXN0b20gQmFzZW1hcFwiLFxyXG4gICAgICAgIGlkOiBcIm15QmFzZW1hcFwiXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgbWFwRWRpdGluZyA9IG5ldyBNYXAoe1xyXG4gICAgICAgIGJhc2VtYXA6IHZlY3RvckJhc2VtYXBcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1hcEhlYXRtYXAgPSBuZXcgV2ViTWFwKHtcclxuICAgICAgICBwb3J0YWxJdGVtOiB7XHJcbiAgICAgICAgICAgIGlkOiBcIjIyZWY5ZDFmOGQ5ZTQ5ZTY5MjBmMGM0ZTA2NDMxMTNhXCJcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB2aWV3RWRpdGluZyA9IG5ldyBNYXBWaWV3KHtcclxuICAgICAgICBjb250YWluZXI6IFwibWFwRWRpdGluZ1wiLCAgXHJcbiAgICAgICAgbWFwOiBtYXBFZGl0aW5nLCAgXHJcbiAgICAgICAgem9vbTogMywgIFxyXG4gICAgICAgIGNlbnRlcjogWzE3LCA1MF0gIFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgdmlld0hlYXRtYXAgPSBuZXcgTWFwVmlldyh7XHJcbiAgICAgICAgY29udGFpbmVyOiBcIm1hcEhlYXRtYXBcIixcclxuICAgICAgICBtYXA6IG1hcEhlYXRtYXAsXHJcbiAgICAgICAgem9vbTogMyxcclxuICAgICAgICBjZW50ZXI6IFsxNywgNTBdICBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZCBhbiBlZGl0YWJsZSBmZWF0dXJlbGF5ZXIgZnJvbSBwb3J0YWxcclxuICAgIExheWVyLmZyb21Qb3J0YWxJdGVtKHtcclxuICAgICAgICBwb3J0YWxJdGVtOiB7IC8vIGF1dG9jYXN0cyBhcyBuZXcgUG9ydGFsSXRlbSgpXHJcbiAgICAgICAgICAgIGlkOiBcIjMwYWU5ZDEyZjEwZTQwN2E4YzFiMmRmN2M3MmI3ZDQ2XCJcclxuICAgICAgICB9XHJcbiAgICB9KS50aGVuKGFkZExheWVyKVxyXG4gICAgICAgICAgICAuY2F0Y2goaGFuZGxlTGF5ZXJMb2FkRXJyb3IpO1xyXG5cclxuICAgIHNldHVwRWRpdGluZygpO1xyXG4gICAgc2V0dXBWaWV3KCk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkTGF5ZXIobGF5ZXIpIHtcclxuICAgICAgICBmZWF0dXJlTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICBtYXBFZGl0aW5nLmFkZChsYXllcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbHlFZGl0cyhwYXJhbXMpIHtcclxuICAgICAgICB1bnNlbGVjdEZlYXR1cmUoKTtcclxuICAgICAgICBsZXQgcHJvbWlzZSA9IGZlYXR1cmVMYXllci5hcHBseUVkaXRzKHBhcmFtcyk7XHJcbiAgICAgICAgZWRpdFJlc3VsdHNIYW5kbGVyKHByb21pc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAvLyBhcHBseUVkaXRzIHByb21pc2UgcmVzb2x2ZWQgc3VjY2Vzc2Z1bGx5XHJcbiAgICAvLyBxdWVyeSB0aGUgbmV3bHkgY3JlYXRlZCBmZWF0dXJlIGZyb20gdGhlIGZlYXR1cmVsYXllclxyXG4gICAgLy8gc2V0IHRoZSBlZGl0RmVhdHVyZSBvYmplY3Qgc28gdGhhdCBpdCBjYW4gYmUgdXNlZFxyXG4gICAgLy8gdG8gdXBkYXRlIGl0cyBmZWF0dXJlcy5cclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBmdW5jdGlvbiBlZGl0UmVzdWx0c0hhbmRsZXIocHJvbWlzZSkge1xyXG4gICAgICAgIHByb21pc2VcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGVkaXRzUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXh0cmFjdE9iamVjdElkID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQub2JqZWN0SWQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgb2JqZWN0SWQgb2YgdGhlIG5ld2x5IGFkZGVkIGZlYXR1cmVcclxuICAgICAgICAgICAgICAgIGlmIChlZGl0c1Jlc3VsdC5hZGRGZWF0dXJlUmVzdWx0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFkZHMgPSBlZGl0c1Jlc3VsdC5hZGRGZWF0dXJlUmVzdWx0cy5tYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RPYmplY3RJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0luY2lkZW50SWQgPSBhZGRzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RGZWF0dXJlKG5ld0luY2lkZW50SWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlsgYXBwbHlFZGl0cyBdIEZBSUxVUkU6IFwiLCBlcnJvci5jb2RlLCBlcnJvci5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciA9IFwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAvLyBsaXN0ZW4gdG8gY2xpY2sgZXZlbnQgb24gdGhlIHZpZXdcclxuICAgIC8vIDEuIHNlbGVjdCBpZiB0aGVyZSBpcyBhbiBpbnRlcnNlY3RpbmcgZmVhdHVyZVxyXG4gICAgLy8gMi4gc2V0IHRoZSBpbnN0YW5jZSBvZiBlZGl0RmVhdHVyZVxyXG4gICAgLy8gMy4gZWRpdEZlYXR1cmUgaXMgdGhlIGZlYXR1cmUgdG8gdXBkYXRlIG9yIGRlbGV0ZVxyXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIHZpZXdFZGl0aW5nLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdW5zZWxlY3RGZWF0dXJlKCk7XHJcbiAgICAgICAgdmlld0VkaXRpbmcuaGl0VGVzdChldmVudCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA+IDEgJiYgcmVzcG9uc2UucmVzdWx0c1swXS5ncmFwaGljKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZSA9IHJlc3BvbnNlLnJlc3VsdHNbMF0uZ3JhcGhpYztcclxuICAgICAgICAgICAgICAgIHNlbGVjdEZlYXR1cmUoZmVhdHVyZS5hdHRyaWJ1dGVzW2ZlYXR1cmVMYXllci5vYmplY3RJZEZpZWxkXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVFZGl0aW5nLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVJbnN0cnVjdGlvbkRpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAvLyBzZWxlY3QgRmVhdHVyZSBmdW5jdGlvblxyXG4gICAgLy8gMS4gU2VsZWN0IHRoZSBuZXdseSBjcmVhdGVkIGZlYXR1cmUgb24gdGhlIHZpZXdcclxuICAgIC8vIDIuIG9yIHNlbGVjdCBhbiBleGlzdGluZyBmZWF0dXJlIHdoZW4gdXNlciBjbGljayBvbiBpdFxyXG4gICAgLy8gMy4gU3ltYm9saXplIHRoZSBmZWF0dXJlIHdpdGggY3lhbiByZWN0YW5nbGVcclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBmdW5jdGlvbiBzZWxlY3RGZWF0dXJlKG9iamVjdElkKSB7XHJcbiAgICAgICAgLy8gc3ltYm9sIGZvciB0aGUgc2VsZWN0ZWQgZmVhdHVyZSBvbiB0aGUgdmlld1xyXG4gICAgICAgIGxldCBzZWxlY3Rpb25TeW1ib2wgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic2ltcGxlLW1hcmtlclwiLCAvLyBhdXRvY2FzdHMgYXMgbmV3IFNpbXBsZU1hcmtlclN5bWJvbCgpXHJcbiAgICAgICAgICAgIGNvbG9yOiBbMCwgMCwgMCwgMF0sXHJcbiAgICAgICAgICAgIHN0eWxlOiBcInNxdWFyZVwiLFxyXG4gICAgICAgICAgICBzaXplOiBcIjQwcHhcIixcclxuICAgICAgICAgICAgb3V0bGluZToge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IFswLCAyNTUsIDI1NSwgMV0sXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIzcHhcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgcXVlcnkgPSBmZWF0dXJlTGF5ZXIuY3JlYXRlUXVlcnkoKTtcclxuICAgICAgICBxdWVyeS53aGVyZSA9IGZlYXR1cmVMYXllci5vYmplY3RJZEZpZWxkICsgXCIgPSBcIiArIG9iamVjdElkO1xyXG5cclxuICAgICAgICBmZWF0dXJlTGF5ZXIucXVlcnlGZWF0dXJlcyhxdWVyeSkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0cy5mZWF0dXJlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlZGl0RmVhdHVyZSA9IHJlc3VsdHMuZmVhdHVyZXNbMF07XHJcbiAgICAgICAgICAgICAgICBlZGl0RmVhdHVyZS5zeW1ib2wgPSBzZWxlY3Rpb25TeW1ib2w7XHJcbiAgICAgICAgICAgICAgICB2aWV3RWRpdGluZy5ncmFwaGljcy5hZGQoZWRpdEZlYXR1cmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIC8vIGhpZGUgYXR0cmlidXRlcyB1cGRhdGUgYW5kIGRlbGV0ZSBwYXJ0IHdoZW4gbmVjZXNzYXJ5XHJcbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgZnVuY3Rpb24gdW5zZWxlY3RGZWF0dXJlKCkge1xyXG4gICAgICAgIGF0dHJpYnV0ZUVkaXRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHVwZGF0ZUluc3RydWN0aW9uRGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIHZpZXdFZGl0aW5nLmdyYXBoaWNzLnJlbW92ZUFsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAvLyBhZGQgaG9tZUJ1dHRvbiBhbmQgZXhwYW5kIHdpZGdldHMgdG8gVUlcclxuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBmdW5jdGlvbiBzZXR1cFZpZXcoKSB7XHJcbiAgICAgICAgLy8gZXhwYW5kIHdpZGdldFxyXG4gICAgICAgIGVkaXRFeHBhbmQgPSBuZXcgRXhwYW5kKHtcclxuICAgICAgICAgICAgZXhwYW5kSWNvbkNsYXNzOiBcImVzcmktaWNvbi1lZGl0XCIsXHJcbiAgICAgICAgICAgIGV4cGFuZFRvb2x0aXA6IFwiRXhwYW5kIEVkaXRcIixcclxuICAgICAgICAgICAgZXhwYW5kZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHZpZXc6IHZpZXdFZGl0aW5nLFxyXG4gICAgICAgICAgICBjb250ZW50OiBlZGl0QXJlYVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZpZXdFZGl0aW5nLnVpLmFkZChlZGl0RXhwYW5kLCBcInRvcC1yaWdodFwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgLy8gc2V0IHVwIGZvciBlZGl0aW5nXHJcbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgZnVuY3Rpb24gc2V0dXBFZGl0aW5nKCkge1xyXG4gICAgICAgIC8vIGlucHV0IGJveGVzIGZvciB0aGUgYXR0cmlidXRlIGVkaXRpbmdcclxuICAgICAgICBlZGl0QXJlYSA9IGRvbS5ieUlkKFwiZWRpdEFyZWFcIik7XHJcbiAgICAgICAgdXBkYXRlSW5zdHJ1Y3Rpb25EaXYgPSBkb20uYnlJZChcInVwZGF0ZUluc3RydWN0aW9uRGl2XCIpO1xyXG4gICAgICAgIGF0dHJpYnV0ZUVkaXRpbmcgPSBkb20uYnlJZChcImZlYXR1cmVVcGRhdGVEaXZcIik7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgIC8vIGJ0bkFkZEZlYXR1cmUgY2xpY2sgZXZlbnRcclxuICAgICAgICAvLyBjcmVhdGUgYSBuZXcgZmVhdHVyZSBhdCB0aGUgY2xpY2sgbG9jYXRpb25cclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgIG9uKGRvbS5ieUlkKFwiYnRuQWRkRmVhdHVyZVwiKSwgXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHVuc2VsZWN0RmVhdHVyZSgpO1xyXG4gICAgICAgICAgICBvbi5vbmNlKHZpZXdFZGl0aW5nLCBcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm1hcFBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gZXZlbnQubWFwUG9pbnQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBwb2ludC56ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Lmhhc1ogPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0luY2lkZW50ID0gbmV3IEdyYXBoaWMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogcG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVkaXRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRGZWF0dXJlczogW25ld0luY2lkZW50XVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFwcGx5RWRpdHMoZWRpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVpIGNoYW5nZXMgaW4gcmVzcG9uc2UgdG8gY3JlYXRpbmcgYSBuZXcgZmVhdHVyZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgZmVhdHVyZSB1cGRhdGUgYW5kIGRlbGV0ZSBwb3J0aW9uIG9mIHRoZSBlZGl0IGFyZWFcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVFZGl0aW5nLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSW5zdHJ1Y3Rpb25EaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbS5ieUlkKFwibWFwRWRpdGluZ1wiKS5zdHlsZS5jdXJzb3IgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImV2ZW50Lm1hcFBvaW50IGlzIG5vdCBkZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdmlldydzIG1vdXNlIGN1cnNvciBvbmNlIHVzZXIgc2VsZWN0c1xyXG4gICAgICAgICAgICAvLyBhIG5ldyBpbmNpZGVudCB0eXBlIHRvIGNyZWF0ZVxyXG4gICAgICAgICAgICBkb20uYnlJZChcIm1hcEVkaXRpbmdcIikuc3R5bGUuY3Vyc29yID0gXCJjcm9zc2hhaXJcIjtcclxuICAgICAgICAgICAgZWRpdEFyZWEuc3R5bGUuY3Vyc29yID0gXCJhdXRvXCI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgICAgLy8gZGVsZXRlIGJ1dHRvbiBjbGljayBldmVudC4gQXBwbHlFZGl0cyBpcyBjYWxsZWRcclxuICAgICAgICAvLyB3aXRoIHRoZSBzZWxlY3RlZCBmZWF0dXJlIHRvIGJlIGRlbGV0ZWRcclxuICAgICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgIG9uKGRvbS5ieUlkKFwiYnRuRGVsZXRlXCIpLCBcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGVkaXRzID0ge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlRmVhdHVyZXM6IFtlZGl0RmVhdHVyZV1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYXBwbHlFZGl0cyhlZGl0cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGhhbmRsZUxheWVyTG9hZEVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJMYXllciBmYWlsZWQgdG8gbG9hZDogXCIsIGVycm9yKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgICAqIHV0aWxpdHkgbWV0aG9kIHRoYXQgc3luY2hyb25pemVzIHRoZSB2aWV3cG9pbnQgb2YgYSB2aWV3IHRvIG90aGVyIHZpZXdzXHJcbiAgICAgICAqL1xyXG4gICAgdmFyIHN5bmNocm9uaXplVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBvdGhlcnMpIHtcclxuICAgICAgICBvdGhlcnMgPSBBcnJheS5pc0FycmF5KG90aGVycykgPyBvdGhlcnMgOiBbb3RoZXJzXTtcclxuXHJcbiAgICAgICAgdmFyIHZpZXdwb2ludFdhdGNoSGFuZGxlO1xyXG4gICAgICAgIHZhciB2aWV3U3RhdGlvbmFyeUhhbmRsZTtcclxuICAgICAgICB2YXIgb3RoZXJJbnRlcmFjdEhhbmRsZXJzO1xyXG4gICAgICAgIHZhciBzY2hlZHVsZUlkO1xyXG5cclxuICAgICAgICB2YXIgY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvdGhlckludGVyYWN0SGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgIG90aGVySW50ZXJhY3RIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2aWV3cG9pbnRXYXRjaEhhbmRsZSAmJiB2aWV3cG9pbnRXYXRjaEhhbmRsZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdmlld1N0YXRpb25hcnlIYW5kbGUgJiYgdmlld1N0YXRpb25hcnlIYW5kbGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHNjaGVkdWxlSWQgJiYgY2xlYXJUaW1lb3V0KHNjaGVkdWxlSWQpO1xyXG4gICAgICAgICAgICBvdGhlckludGVyYWN0SGFuZGxlcnMgPSB2aWV3cG9pbnRXYXRjaEhhbmRsZSA9XHJcbiAgICAgICAgICAgICAgICB2aWV3U3RhdGlvbmFyeUhhbmRsZSA9IHNjaGVkdWxlSWQgPSBudWxsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpbnRlcmFjdFdhdGNoZXIgPSB2aWV3LndhdGNoKCdpbnRlcmFjdGluZyxhbmltYXRpb24nLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmlld3BvaW50V2F0Y2hIYW5kbGUgfHwgc2NoZWR1bGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCB1cGRhdGluZyB0aGUgb3RoZXIgdmlld3MgYXQgdGhlIG5leHQgZnJhbWVcclxuICAgICAgICAgICAgICAgIHNjaGVkdWxlSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZUlkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3cG9pbnRXYXRjaEhhbmRsZSA9IHZpZXcud2F0Y2goJ3ZpZXdwb2ludCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzLmZvckVhY2goZnVuY3Rpb24gKG90aGVyVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyVmlldy52aWV3cG9pbnQgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgYXMgc29vbiBhcyBhbm90aGVyIHZpZXcgc3RhcnRzIGludGVyYWN0aW5nLCBsaWtlIGlmIHRoZSB1c2VyIHN0YXJ0cyBwYW5uaW5nXHJcbiAgICAgICAgICAgICAgICBvdGhlckludGVyYWN0SGFuZGxlcnMgPSBvdGhlcnMubWFwKGZ1bmN0aW9uIChvdGhlclZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2F0Y2hVdGlscy53YXRjaChvdGhlclZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlcmFjdGluZyxhbmltYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBvciBzdG9wIHdoZW4gdGhlIHZpZXcgaXMgc3RhdGlvbmFyeSBhZ2FpblxyXG4gICAgICAgICAgICAgICAgdmlld1N0YXRpb25hcnlIYW5kbGUgPSB3YXRjaFV0aWxzLndoZW5UcnVlKHZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXRpb25hcnknLCBjbGVhcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgICAgICAgICAgY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIGludGVyYWN0V2F0Y2hlci5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1dGlsaXR5IG1ldGhvZCB0aGF0IHN5bmNocm9uaXplcyB0aGUgdmlld3BvaW50cyBvZiBtdWx0aXBsZSB2aWV3c1xyXG4gICAgICovXHJcbiAgICB2YXIgc3luY2hyb25pemVWaWV3cyA9IGZ1bmN0aW9uICh2aWV3cykge1xyXG4gICAgICAgIHZhciBoYW5kbGVzID0gdmlld3MubWFwKGZ1bmN0aW9uICh2aWV3LCBpZHgsIHZpZXdzKSB7XHJcbiAgICAgICAgICAgIHZhciBvdGhlcnMgPSB2aWV3cy5jb25jYXQoKTtcclxuICAgICAgICAgICAgb3RoZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3luY2hyb25pemVWaWV3KHZpZXcsIG90aGVycyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBoLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVzID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBiaW5kIHRoZSB2aWV3c1xyXG4gICAgc3luY2hyb25pemVWaWV3cyhbdmlld0VkaXRpbmcsIHZpZXdIZWF0bWFwXSk7XHJcbiAgICBcclxufSk7Il19
